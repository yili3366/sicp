(load "3.21.scm")
(load "simulator.scm")

(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define (logical-not s)
  (cond ((= s 0) 1)
        ((= s 1) 0)
        (else (error "Invalid signal" s))))

(define (logical-and x y)
  (if (and (= x 1) (= y 1))
      1
      0))

(define (or-gate input-1 input-2 output)
  (let ((invert-1 (make-wire))
        (invert-2 (make-wire))
        (and-invert-1-invert-2 (make-wire)))
    (inverter input-1 invert-1)
    (inverter input-2 invert-2)
    (and-gate invert-1 invert-2 and-invert-1-invert-2)
    (inverter and-invert-1-invert-2 output))
  'ok)

(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)

(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)

(define (ripple-carry-adder list-A list-B list-S C)
  (define (iter A B S value-of-c)
    (if (and (null? A) (null? B) (null? S))
        (add-action! C
                     (lambda () (set-signal! C (get-signal C))))
        (let ((Ak (car A))
              (Bk (car B))
              (Sk (car S))
              (remain-A (cdr A))
              (remain-B (cdr B))
              (remain-S (cdr S))
              (Ck (make-wire)))
          (set-signal! Ck value-of-c)
          (full-adder Ak Bk Ck Sk C)
          (iter remain-A remain-B remain-S (get-signal C)))))
  (set-signal! C 0)
  (iter list-A list-B list-S (get-signal C)))
